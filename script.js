// Importar funciones de Supabase
import { auth, tours } from './supabase.js';
// import { stripe, createPaymentSession } from './stripe.js'; // Comentado por ahora

// Variables globales
let selectedTour = null;
let selectedTourId = null; // ID real del tour de Supabase
let selectedTime = '1h';
let selectedAccessibility = [];
let currentPoint = 1;
let totalPoints = 5;
let currentRating = 0;
let tourStarted = false;
let isPremiumUser = false;
let userName = 'Usuario/a';
let isNightMode = false;
let audioPlaying = false;
let audioProgress = 0;
let audioSpeed = 1;
let audioInterval;

// Sistema de historial de navegaci√≥n
let navigationHistory = [];
const maxHistorySize = 10;

// Mapeo de tipos de tour a IDs de Supabase
let tourTypeToIdMap = {}

// Sistema de notificaciones
function showNotification(message, type = 'success', duration = 3000) {
    const container = document.getElementById('notification-container');
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    container.appendChild(notification);
    
    // Trigger animation
    setTimeout(() => notification.classList.add('show'), 10);
    
    // Auto remove
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => container.removeChild(notification), 400);
    }, duration);
}

// Toggle modo nocturno
function toggleNightMode() {
    isNightMode = !isNightMode;
    const body = document.body;
    const container = document.getElementById('main-container');
    const nightModeIcon = document.getElementById('night-mode-icon');
    const nightModeText = document.getElementById('night-mode-text');
    
    if (isNightMode) {
        body.classList.add('night-mode');
        container.classList.add('night-mode');
        if (nightModeIcon) nightModeIcon.textContent = '‚òÄÔ∏è';
        if (nightModeText) nightModeText.textContent = 'Modo Diurno';
        showNotification('Modo nocturno activado', 'info');
    } else {
        body.classList.remove('night-mode');
        container.classList.remove('night-mode');
        if (nightModeIcon) nightModeIcon.textContent = 'üåô';
        if (nightModeText) nightModeText.textContent = 'Modo Nocturno';
        showNotification('Modo d√≠a activado', 'info');
    }
}

// Controles de audio
function toggleAudio() {
    const btn = document.getElementById('audio-btn');
    audioPlaying = !audioPlaying;
    
    if (audioPlaying) {
        btn.textContent = '‚è∏Ô∏è';
        btn.classList.add('playing');
        startAudioProgress();
        showNotification('Reproduciendo audio explicativo', 'info', 2000);
    } else {
        btn.textContent = '‚ñ∂Ô∏è';
        btn.classList.remove('playing');
        stopAudioProgress();
    }
}

function startAudioProgress() {
    audioInterval = setInterval(() => {
        audioProgress += (1 / audioSpeed);
        if (audioProgress >= 100) {
            audioProgress = 100;
            stopAudioProgress();
            document.getElementById('audio-btn').textContent = '‚ñ∂Ô∏è';
            document.getElementById('audio-btn').classList.remove('playing');
            showNotification('Audio completado', 'success', 2000);
        }
        updateAudioDisplay();
    }, 50);
}

function stopAudioProgress() {
    if (audioInterval) {
        clearInterval(audioInterval);
        audioInterval = null;
    }
}

function updateAudioDisplay() {
    const progressBar = document.getElementById('audio-progress');
    const timeDisplay = document.getElementById('audio-time');
    progressBar.style.width = audioProgress + '%';
    
    const currentTime = Math.floor((audioProgress / 100) * 60); // Asumiendo 60 segundos por explicaci√≥n
    const minutes = Math.floor(currentTime / 60);
    const seconds = currentTime % 60;
    timeDisplay.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
}

function changeSpeed() {
    const speeds = [1, 1.25, 1.5, 2];
    const currentIndex = speeds.indexOf(audioSpeed);
    audioSpeed = speeds[(currentIndex + 1) % speeds.length];
    document.getElementById('speed-btn').textContent = `${audioSpeed}x`;
    showNotification(`Velocidad: ${audioSpeed}x`, 'info', 1500);
}

function skipExplanation() {
    stopAudioProgress();
    audioProgress = 100;
    updateAudioDisplay();
    document.getElementById('audio-btn').textContent = '‚ñ∂Ô∏è';
    document.getElementById('audio-btn').classList.remove('playing');
    showNotification('Explicaci√≥n omitida', 'warning', 2000);
}

function showFunFacts() {
    // No mostrar curiosidades en el Tour Aventura para evitar spoilers
    if (selectedTour === 'adventure') {
        showNotification('üîç ¬°Sigue las pistas para descubrir los secretos por ti mismo!', 'info', 3000);
        return;
    }
    
    const facts = {
        1: "üí° ¬øSab√≠as que las Siete Calles originales eran: Somera, Artecalle, Tender√≠a, Belostikale, Carnicer√≠a Vieja, Barrencalle y Barrencalle Barrena? Cada una ten√≠a su propio gremio artesanal.",
        2: "üí° El Guggenheim tiene m√°s de 33,000 placas de titanio y ninguna es igual a otra. El edificio cambia de color seg√∫n la luz del d√≠a.",
        3: "üí° Juan Cris√≥stomo Arriaga compuso su √∫nica √≥pera 'Los esclavos felices' a los 13 a√±os. Mozart del Norte lo llamaban.",
        4: "üí° La Catedral de Santiago fue constru√≠da sobre un antiguo templo romano. En sus criptas se han encontrado restos arqueol√≥gicos fascinantes.",
        5: "üí° El Mercado de la Ribera aparece en el Libro Guinness como el mercado cubierto m√°s grande de Europa con sus 10,000 metros cuadrados."
    };
    
    showNotification(facts[currentPoint] || "üí° ¬°Lugar fascinante lleno de historia!", 'info', 5000);
}

// Funci√≥n para mostrar/ocultar la cabecera
function toggleHeader(show) {
    const header = document.getElementById('app-header');
    if (show) {
        header.style.display = 'flex';
    } else {
        header.style.display = 'none';
    }
}

// Funci√≥n para actualizar el estado del usuario
function updateUserStatus() {
    const userNameEl = document.getElementById('user-name');
    const userTypeEl = document.getElementById('user-type');
    const premiumBtn = document.getElementById('premium-btn');
    
    if (userNameEl) userNameEl.textContent = userName;
    
    if (isPremiumUser) {
        if (userTypeEl) userTypeEl.textContent = '(Premium)';
        if (premiumBtn) {
            premiumBtn.textContent = 'Premium ‚úì';
            premiumBtn.classList.add('premium-user');
        }
    } else {
        if (userTypeEl) userTypeEl.textContent = '(Gratuito)';
        if (premiumBtn) {
            premiumBtn.textContent = 'Hazte Premium';
            premiumBtn.classList.remove('premium-user');
        }
    }
}

// Funci√≥n para mostrar popups
function showPopup(popupId) {
    const popup = document.getElementById(popupId);
    if (popup) popup.classList.add('active');
}

// Funci√≥n para cerrar popups
function closePopup(popupId) {
    const popup = document.getElementById(popupId);
    if (popup) popup.classList.remove('active');
}

// Funci√≥n para manejar click en el men√∫ de usuario
function toggleUserMenu() {
    showPopup('user-popup');
}

// Funci√≥n para manejar click en el bot√≥n premium
function togglePremiumPopup() {
    if (!isPremiumUser) {
        showPopup('premium-popup');
    } else {
        showNotification('¬°Ya eres usuario Premium! Disfruta de todas las ventajas üéâ', 'success');
    }
}

// Funciones del men√∫ de usuario
async function showProfile() {
    closePopup('user-popup');
    
    // Obtener datos del usuario actual
    const currentUser = await auth.getCurrentUser();
    
    if (currentUser) {
        const userEmail = currentUser.email;
        const userCreated = new Date(currentUser.created_at).toLocaleDateString('es-ES');
        
        // Obtener estad√≠sticas del usuario
        const stats = await getUserStats(currentUser.id);
        
        // Crear el contenido del perfil
        const profileContent = `
            <div style="text-align: center; padding: 20px;">
                <h3>üë§ Mi Perfil</h3>
                <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin: 15px 0;">
                    <p><strong>Nombre:</strong> ${userName}</p>
                    <p><strong>Email:</strong> ${userEmail}</p>
                    <p><strong>Miembro desde:</strong> ${userCreated}</p>
                </div>
                <div style="background: #e8f5e8; padding: 15px; border-radius: 10px; margin: 15px 0;">
                    <p><strong>üéØ Tours Completados:</strong> ${stats.completedTours}</p>
                    <p><strong>‚≠ê Puntuaci√≥n Media:</strong> ${stats.averageRating}/5</p>
                </div>
                <button onclick="closeCustomPopup()" class="tour-btn" style="margin-top: 15px;">Cerrar</button>
            </div>
        `;
        
        // Crear popup personalizado
        createCustomPopup('Perfil de Usuario', profileContent);
    } else {
        showNotification('Error al obtener datos del usuario', 'error');
    }
}

function showSettings() {
    closePopup('user-popup');
    showNotification('Configuraci√≥n - Pr√≥ximamente disponible', 'info');
}

function logout() {
    closePopup('user-popup');
    if (confirm('¬øEst√°s seguro de que quieres cerrar sesi√≥n?')) {
        // Usar Supabase para cerrar sesi√≥n
        auth.signOut().then(result => {
            if (result.success) {
                showScreen('login-screen');
                toggleHeader(false);
                showNotification('Sesi√≥n cerrada correctamente', 'info');
            } else {
                showNotification('Error al cerrar sesi√≥n', 'error');
            }
        });
    }
}

// Funci√≥n para simular diferentes usuarios (solo para desarrollo)
function simulateUser(userType) {
    if (userType === 'premium') {
        userName = 'Mar√≠a';
        isPremiumUser = true;
    } else {
        userName = 'Ana';
        isPremiumUser = false;
    }
    updateUserStatus();
}

// Funci√≥n para suscribirse a Premium
function subscribeToPremium() {
    isPremiumUser = true;
    updateUserStatus();
    closePopup('premium-popup');
    showNotification('¬°Bienvenido a Premium! üéâ\nYa puedes disfrutar de todas las ventajas', 'success', 4000);
}

function showScreen(screenId) {
    // Obtener pantalla actual antes del cambio
    const currentScreen = document.querySelector('.screen.active');
    const currentScreenId = currentScreen ? currentScreen.id : null;
    
    // Agregar al historial (excepto si es la misma pantalla o volvemos atr√°s)
    if (currentScreenId && currentScreenId !== screenId) {
        navigationHistory.push(currentScreenId);
        // Limitar tama√±o del historial
        if (navigationHistory.length > maxHistorySize) {
            navigationHistory.shift();
        }
    }
    
    // Ocultar todas las pantallas
    const screens = document.querySelectorAll('.screen');
    screens.forEach(screen => screen.classList.remove('active'));
    
    // Mostrar la pantalla seleccionada
    const targetScreen = document.getElementById(screenId);
    if (targetScreen) {
        targetScreen.classList.add('active');
    }
    
    // Mostrar/ocultar cabecera seg√∫n la pantalla
    const screensWithoutHeader = ['login-screen', 'register-screen'];
    if (screensWithoutHeader.includes(screenId)) {
        toggleHeader(false);
    } else {
        toggleHeader(true);
        updateUserStatus();
    }
    
    // Resetear rating cuando se muestre la pantalla de valoraci√≥n
    if (screenId === 'rating-screen') {
        currentRating = 0;
        updateRatingButtons();
    }
    
    console.log('Navegando a:', screenId, 'Historial:', navigationHistory);
}

// Funci√≥n para ir atr√°s en el historial
function goBack() {
    if (navigationHistory.length > 0) {
        const previousScreen = navigationHistory.pop();
        // Navegar sin agregar al historial
        const screens = document.querySelectorAll('.screen');
        screens.forEach(screen => screen.classList.remove('active'));
        
        const targetScreen = document.getElementById(previousScreen);
        if (targetScreen) {
            targetScreen.classList.add('active');
        }
        
        // Manejar cabecera
        const screensWithoutHeader = ['login-screen', 'register-screen'];
        if (screensWithoutHeader.includes(previousScreen)) {
            toggleHeader(false);
        } else {
            toggleHeader(true);
            updateUserStatus();
        }
        
        console.log('Volviendo a:', previousScreen, 'Historial restante:', navigationHistory);
    } else {
        // Si no hay historial, ir al mapa principal
        showScreen('map-screen');
    }
}

// Hacer las funciones accesibles globalmente para onclick
window.showScreen = showScreen;
window.goBack = goBack;
window.closePopup = closePopup;
window.closeCustomPopup = closeCustomPopup;
window.showProfile = showProfile;
window.showTourHistory = showTourHistory;
window.showFavorites = showFavorites;
window.toggleFavorite = toggleFavorite;
window.toggleNightMode = toggleNightMode;
window.showSettings = showSettings;
window.logout = logout;
window.subscribeToPremium = subscribeToPremium;
window.selectTour = selectTour;
window.selectHumanTour = selectHumanTour;
window.copyLink = copyLink;
window.initializeTour = initializeTour;
window.nextPoint = nextPoint;
window.revealLocation = revealLocation;
window.toggleAudio = toggleAudio;
window.skipExplanation = skipExplanation;
window.changeSpeed = changeSpeed;
window.showFunFacts = showFunFacts;
window.selectRating = selectRating;
window.submitRating = submitRating;
window.shareOn = shareOn;

// Funci√≥n para seleccionar tour
function selectTour(tourType) {
    // Tours tem√°ticos - pr√≥ximamente
    if (tourType === 'themed') {
        showNotification('üé≠ Pr√≥ximamente... Estamos preparando tours tem√°ticos especiales para ti', 'info', 4000);
        return;
    }
    
    // Tours teatralizados - reservas con gu√≠as humanos
    if (tourType === 'theatrical') {
        showNotification('üé® Redirigiendo a p√°gina de reservas... Tours con gu√≠as humanos disponibles', 'info', 4000);
        // Aqu√≠ se redirigir√≠a a un sistema de reservas real
        setTimeout(() => {
            showNotification('üìû Cont√°ctanos para reservar tu tour teatralizado', 'info', 3000);
        }, 4000);
        return;
    }
    
    // Tours normales (simple, adventure, historic)
    selectedTour = tourType;
    selectedTourId = tourTypeToIdMap[tourType] || null;
    currentPoint = 1; // Reiniciar el contador
    showScreen('share-screen');
    
    // Mensaje seg√∫n el tipo de tour
    const tourMessages = {
        'simple': 'Tour Simple seleccionado - ¬°GRATIS! üèõÔ∏è',
        'adventure': 'Tour Aventura seleccionado - ¬°GRATIS! üîç',
        'historic': 'Tour Hist√≥rico seleccionado - Con actores reales üë®‚Äçüéì'
    };
    
    showNotification(tourMessages[tourType] || `Tour ${tourType} seleccionado`, 'success');
    
    console.log('Tour seleccionado:', tourType, 'ID:', selectedTourId);
}

// Funci√≥n para seleccionar tour teatralizado
function selectHumanTour(tourType) {
    showNotification(`¬°Has seleccionado el tour "${tourType}"! Te redirigiremos a la p√°gina de reservas.`, 'info', 4000);
    // Aqu√≠ se redirigir√≠a a un sistema de reservas real
}

// Siguiente punto en el tour
async function nextPoint() {
    currentPoint++;
    
    // Registrar progreso del tour en Supabase Y LocalStorage
    const currentUser = await auth.getCurrentUser();
    if (currentUser && selectedTourId) {
        try {
            const completed = currentPoint > totalPoints;
            const progress = completed ? totalPoints : currentPoint - 1;
            
            // Guardar en localStorage como backup
            const localProgress = JSON.parse(localStorage.getItem('tour_progress') || '[]');
            const existingIndex = localProgress.findIndex(p => p.user_id === currentUser.id && p.tour_id === selectedTourId);
            
            const progressData = {
                user_id: currentUser.id,
                tour_id: selectedTourId,
                current_point: currentPoint,
                total_points: totalPoints,
                progress: progress,
                completed: completed,
                last_updated: new Date().toISOString()
            };
            
            if (existingIndex >= 0) {
                localProgress[existingIndex] = progressData;
            } else {
                localProgress.push(progressData);
            }
            
            localStorage.setItem('tour_progress', JSON.stringify(localProgress));
            console.log('Progreso guardado localmente:', progressData);
            
            if (completed) {
                // Completar el tour
                const result = await tours.completeTour(currentUser.id, selectedTourId, totalPoints);
                if (result.success) {
                    console.log('Tour completado y registrado en Supabase');
                }
            } else {
                // Actualizar progreso
                const result = await tours.updateTourProgress(
                    currentUser.id, 
                    selectedTourId, 
                    currentPoint, 
                    totalPoints, 
                    progress, 
                    false
                );
                if (result.success) {
                    console.log('Progreso actualizado en Supabase');
                }
            }
        } catch (error) {
            console.error('Error al actualizar progreso del tour:', error);
            showNotification('Progreso guardado localmente', 'info', 2000);
        }
    }
    
    if (currentPoint > totalPoints) {
        showScreen('rating-screen');
        showNotification('¬°Tour completado! üéâ', 'success');
        return;
    }

    // Reset audio
    audioProgress = 0;
    audioPlaying = false;
    stopAudioProgress();
    const audioBtn = document.getElementById('audio-btn');
    if (audioBtn) {
        audioBtn.textContent = '‚ñ∂Ô∏è';
        audioBtn.classList.remove('playing');
    }
    updateAudioDisplay();

    const progressPercent = (currentPoint / totalPoints) * 100;
    const progressFill = document.querySelector('.progress-fill');
    if (progressFill) {
        progressFill.style.width = progressPercent + '%';
    }
    
    showNotification(`Punto ${currentPoint} de ${totalPoints}`, 'info', 2000);
    
    // Contenido de los tours
    const tourDescriptions = {
        simple: {
            1: "üèõÔ∏è **El Casco Viejo de Bilbao - Las Siete Calles Originales**\n\nFundado en 1300 por Don Diego L√≥pez de Haro V, el Casco Viejo es el n√∫cleo original de Bilbao. Las famosas 'Zazpi Kaleak' (Siete Calles en euskera) eran: Somera, Artecalle, Tender√≠a, Belostikale, Carnicer√≠a Vieja, Barrencalle y Barrencalle Barrena.\n\nCada calle albergaba gremios espec√≠ficos: los herreros en Somera, los comerciantes de telas en Tender√≠a, y los carniceros en Carnicer√≠a Vieja. Sus soportales de piedra proteg√≠an las mercanc√≠as de la lluvia atl√°ntica.\n\nüîç **Detalles arquitect√≥nicos**: Observa los escudos her√°ldicos en las fachadas, que narran historias de familias nobles y comerciantes pr√≥speros que construyeron la riqueza de Bilbao.",
            
            2: "üèõÔ∏è **Museo Guggenheim Bilbao - La Maravilla de Titanio**\n\nInaugurado en 1997, este coloso de 24,000 metros cuadrados revolucion√≥ Bilbao. Frank Gehry utiliz√≥ tecnolog√≠a aeroespacial para dise√±ar sus curvas imposibles, revestidas con 33,000 placas √∫nicas de titanio que nunca se oxidan.\n\nEl 'efecto Guggenheim' transform√≥ Bilbao de ciudad industrial a metr√≥poli cultural, atrayendo un mill√≥n de visitantes anuales. Su silueta evoca un barco, honrando el pasado mar√≠timo de la ciudad.\n\nüé® **Obra destacada**: 'Puppy' de Jeff Koons custodia la entrada con sus 70,000 flores que cambian seg√∫n la estaci√≥n, convirti√©ndose en s√≠mbolo viviente de la renovaci√≥n urbana.",
            
            3: "üé≠ **Teatro Arriaga - El Templo de las Artes Vascas**\n\nInaugurado en 1890, este teatro neorenacentista rinde homenaje a Juan Cris√≥stomo Arriaga (1806-1826), el 'Mozart vasco' que compuso sinfon√≠as a los 15 a√±os. Su fachada imita la √ìpera de Par√≠s, con esculturas aleg√≥ricas de la M√∫sica y la Poes√≠a.\n\nSu interior, decorado en rojos y dorados, ha visto actuar a Sarah Bernhardt, Mar√≠a Callas y Pl√°cido Domingo. Los frescos del techo narran la mitolog√≠a vasca: Mari, la diosa madre, y Sugaar, el se√±or de las tormentas.\n\nüéº **Curiosidad musical**: Su √≥rgano Steinway de 1885 a√∫n funciona perfectamente y se usa en conciertos especiales navide√±os.",
            
            4: "‚õ™ **Catedral de Santiago - Guardian Espiritual de Bilbao**\n\nErigida en el siglo XIV sobre un templo rom√°nico anterior, esta catedral g√≥tica custodia las reliquias de Santiago el Mayor. Su torre de 64 metros domina el skyline del Casco Viejo desde hace 600 a√±os.\n\nSantiago es patr√≥n de Bilbao y Espa√±a. Su festividad (25 julio) marca la 'Aste Nagusia', la semana grande bilba√≠na. En las criptas reposan nobles medievales y obispos que forjaron la identidad cristiana de Vizcaya.\n\nüîî **Las campanas**: Sus cinco campanas anuncian las horas desde 1483. La mayor, 'Mar√≠a', pesa 3 toneladas y su ta√±ido se escucha hasta la r√≠a, guiando a marineros perdidos en la niebla atl√°ntica.",
            
            5: "üçé **Mercado de la Ribera - Catedral Gastron√≥mica**\n\nConstruido en 1929 en estilo Art D√©co, es el mercado cubierto m√°s grande de Europa seg√∫n el Libro Guinness. Sus 10,000 m¬≤ albergan 65 puestos que exhiben lo mejor del mar Cant√°brico y los valles vascos.\n\nAqu√≠ convergen pescadores de Bermeo, ganaderos de Gorbea y hortelanos de √Ålava. Los 'neskatillas' (j√≥venes vendedoras) ofrecen txakoli del a√±o, queso idiaz√°bal curado en cuevas y besugo de anzuelo.\n\nüë®‚Äçüç≥ **Gastronom√≠a**: Este templo culinario abastece a los mejores restaurantes con estrellas Michelin. Sus productos frescos son la base de la revoluci√≥n gastron√≥mica vasca que conquist√≥ el mundo."
        },
        adventure: {
            1: "üîç **Pista Inicial - El Origen de las Siete**\n\nEn el a√±o 1300, un noble vizca√≠no fund√≥ un pueblo comercial junto al r√≠o. Siete calles paralelas formaron su coraz√≥n, cada una especializada en un oficio diferente. Los mercaderes llegaban por mar y tierra para intercambiar hierro vasco por lana castellana y pescado cant√°brico.\n\nüïµÔ∏è **Tu misi√≥n**: Encuentra el lugar donde estas siete arterias cobran vida. Busca las piedras m√°s antiguas, los soportales que proteg√≠an las mercanc√≠as, y los escudos que narran historias de hace 700 a√±os.\n\nüí° **Pista adicional**: En una de estas calles, los herreros forjaban las mejores armas de Europa. Su nombre a√∫n recuerda su ubicaci√≥n 'superior' respecto al r√≠o...",
            
            2: "üîç **Segunda Pista - La Nave Que No Navega**\n\nUn visionario arquitecto del siglo XX so√±√≥ con formas que bailaran con la luz atl√°ntica. Utiliz√≥ 33,000 piezas met√°licas √∫nicas para crear una embarcaci√≥n terrestre que transform√≥ una ciudad industrial en capital cultural mundial.\n\nüé® **Tu desaf√≠o**: Localiza esta maravilla contempor√°nea cuyas curvas imposibles desaf√≠an la gravedad. Un perro gigante de flores custodia su entrada, y en su interior, el arte contempor√°neo dialoga con la innovaci√≥n tecnol√≥gica.\n\n‚ö° **Pista clave**: Su creador emple√≥ los mismos programas que Boeing usa para dise√±ar aviones. El 'efecto' que lleva su nombre cambi√≥ Bilbao para siempre...",
            
            3: "üîç **Tercera Pista - El Palacio del Joven Genio**\n\nUn m√∫sico prodigioso nacido en estas tierras compuso sinfon√≠as a los 15 a√±os y muri√≥ en Par√≠s a los 19, llev√°ndose consigo el secreto de melod√≠as que nunca conoceremos. Un palacio de las artes lleva su nombre y custodia su memoria.\n\nüé≠ **Tu b√∫squeda**: Encuentra este templo neorenacentista donde resonaron las voces m√°s ilustres de Europa. Sarah Bernhardt llor√≥ aqu√≠, y Mar√≠a Callas hizo vibrar sus muros. Su fachada imita la √≥pera m√°s famosa del mundo.\n\nüéº **Pista musical**: Lo llamaban el 'Mozart del Norte'. Su apellido vasco significa 'lugar pedregoso'. El teatro que honra su memoria abri√≥ sus puertas cuando la Torre Eiffel ya dominaba Par√≠s...",
            
            4: "üîç **Cuarta Pista - El Protector de las Alturas**\n\nDesde hace seis siglos, una torre g√≥tica se alza como guardi√°n silencioso de la villa. En su interior, el patr√≥n de Espa√±a y de esta ciudad bendice a peregrinos que siguen un camino milenario hacia el fin del mundo conocido.\n\n‚õ™ **Tu peregrinaje**: Asciende hasta donde las campanas medievales marcan el tiempo desde 1483. La mayor pesa tres toneladas y su voz gu√≠a a marineros perdidos en la niebla cant√°brica.\n\nüîî **Pista sagrada**: Cada 25 de julio, toda la ciudad celebra a este santo soldado. Su festividad marca la semana m√°s importante del a√±o bilba√≠no. Su nombre tambi√©n designa una ruta europea de peregrinaci√≥n...",
            
            5: "üîç **Quinta Pista - El Encuentro de Sabores**\n\nDonde el mar besa a la tierra, donde los valles abrazan a los montes, se alza un templo gastron√≥mico que el Libro Guinness reconoce como el m√°s grande de su tipo en Europa. Aqu√≠ convergen los tesoros culinarios de tres provincias.\n\nüçΩÔ∏è **Tu destino final**: Localiza este edificio Art D√©co de 1929 donde 65 comerciantes exhiben lo mejor del Cant√°brico y los valles vascos. Las 'neskatillas' ofrecen productos que alimentan a restaurantes con estrellas Michelin.\n\nüèÜ **Pista definitiva**: Sus 10,000 metros cuadrados de superficie lo convierten en r√©cord mundial. Su ubicaci√≥n 'ribere√±a' le da nombre, y en sus puestos naci√≥ la revoluci√≥n gastron√≥mica que conquist√≥ el planeta..."
        },
        historic: {
            1: "üë®‚Äçüéì **Miguel de Unamuno te saluda desde la eternidad**\n\n'Queridos caminantes del tiempo, soy Miguel de Unamuno, y estas piedras que pis√°is fueron testigo de mis pasos juveniles. El Casco Viejo late con el coraz√≥n de la aut√©ntica Bilbao, donde cada adoqu√≠n es un verso de nuestra intrahistoria.'\n\nüìö **Reflexi√≥n unamuniana**: 'Aqu√≠, en estas Siete Calles, aprend√≠ que la tradici√≥n no es ceniza muerta, sino brasa viva que enciende el alma de los pueblos. Los comerciantes medievales que transitaron estos soportales tej√≠an, sin saberlo, el destino de una naci√≥n.'\n\n‚úçÔ∏è **Mensaje del fil√≥sofo**: 'Observad los escudos her√°ldicos: cada uno narra una epopeya familiar. Como escrib√≠ alguna vez: \"Los pueblos que olvidan su historia est√°n condenados a repetir sus errores\". Estas calles son p√°ginas vivas de nuestro ser colectivo.'",
            
            2: "üë®‚Äçüéì **Unamuno contempla la modernidad**\n\n'Desde mi eterno descanso contemplo esta maravilla moderna que transform√≥ mi Bilbao. El Guggenheim es la prueba viviente de que nuestra tierra no teme al futuro, sino que lo abraza sin renunciar a su esencia.'\n\nüèõÔ∏è **Meditaci√≥n del sabio**: 'Frank Gehry ha logrado lo que yo siempre prediqu√©: que la tradici√≥n sea sedimento f√©rtil de la innovaci√≥n. Estas curvas imposibles dialogan con nuestros montes eternos, y este titanio refleja la luz atl√°ntica que ba√±√≥ mi juventud.'\n\nüí≠ **Filosof√≠a unamuniana**: 'Como escrib√≠: \"La tradici√≥n es la sustancia de la historia\". Este museo demuestra que Bilbao no museifica su pasado, sino que lo proyecta hacia horizontes inexplorados. ¬°Qu√© orgulloso me siento de esta metamorfosis!'",
            
            3: "üë®‚Äçüéì **Unamuno evoca al genio musical**\n\n'¬°Ah, el Teatro Arriaga! Aqu√≠ resonaron mis versos y los de tantos hermanos en las letras. Este templo de las artes lleva el nombre de nuestro Mozart vasco, Juan Cris√≥stomo Arriaga, genio que nos dej√≥ demasiado pronto para la gloria eterna.'\n\nüéº **Homenaje del rector**: 'Arriaga compuso a los 15 a√±os lo que otros no logran en una vida entera. Su sinfon√≠a en Re menor rivalizaba con las de Beethoven. ¬°Qu√© no habr√≠a dado la humanidad por tenerlo 50 a√±os m√°s entre nosotros!'\n\nüé≠ **Reflexi√≥n cultural**: 'En este escenario he visto llorar a Sarah Bernhardt y he escuchado a Mar√≠a Callas hacer temblar los cristales. El arte es el lenguaje universal que hermana a los pueblos m√°s diversos. Aqu√≠, Bilbao habla al mundo en esperanto est√©tico.'",
            
            4: "üë®‚Äçüéì **Unamuno y el camino de Santiago**\n\n'La Catedral de Santiago nos recuerda que Bilbao siempre fue paso de peregrinos del alma. Como yo mismo escrib√≠: \"Se hace camino al andar\", y estos viajeros espirituales han hecho de nuestra ciudad un punto de encuentro de culturas y fe.'\n\n‚õ™ **Meditaci√≥n espiritual**: 'Desde hace seis siglos, estas campanas g√≥ticas marcan no solo las horas del d√≠a, sino los latidos del alma colectiva vasca. Santiago, patr√≥n de Espa√±a, protege desde aqu√≠ a quienes buscan sentido en el peregrinar.'\n\nüïäÔ∏è **Filosof√≠a del camino**: 'He predicado que \"solo se posee lo que se comparte\". Esta catedral comparte con el mundo la hospitalidad vasca, el recogimiento cristiano y la belleza g√≥tica que eleva el esp√≠ritu hacia lo trascendente. ¬°Benditos sean los que caminan buscando!'",
            
            5: "üë®‚Äçüéì **Unamuno celebra la gastronom√≠a vasca**\n\n'El Mercado de la Ribera es el alma gastron√≥mica de Bilbao, donde se encuentra la esencia genuina de nuestra tierra: el mar cant√°brico y los verdes valles vascos unidos en perfecta armon√≠a culinaria que alimenta cuerpo y esp√≠ritu.'\n\nüçΩÔ∏è **Elogio del fil√≥sofo**: 'Aqu√≠ convergen pescadores de Bermeo, ganaderos de Gorbea y hortelanos de √Ålava. Sus productos son poemas comestibles que narran la generosidad de esta tierra bendita. ¬°Qu√© universidad m√°s sabrosa que este mercado!'\n\nüèÜ **Legado cultural**: 'De estos puestos nacieron los cocineros que conquistaron el mundo con nuestra gastronom√≠a. Como siempre dije: \"El pueblo que come bien, piensa bien\". Este templo culinario es c√°tedra de identidad, tradici√≥n y excelencia vasca. ¬°Salud y buenos alimentos!'"
        }
    };
    
    const tourTitles = {
        simple: {
            1: "üèõÔ∏è Casco Viejo - Siete Calles",
            2: "üèõÔ∏è Museo Guggenheim Bilbao",
            3: "üé≠ Teatro Arriaga",
            4: "‚õ™ Catedral de Santiago",
            5: "üçé Mercado de la Ribera"
        },
        adventure: {
            1: "üîç Ubicaci√≥n Misteriosa #1",
            2: "üîç Ubicaci√≥n Misteriosa #2", 
            3: "üîç Ubicaci√≥n Misteriosa #3",
            4: "üîç Ubicaci√≥n Misteriosa #4",
            5: "üîç Ubicaci√≥n Misteriosa #5"
        },
        historic: {
            1: "üë®‚Äçüéì Unamuno en el Casco Viejo",
            2: "üë®‚Äçüéì Unamuno y el Guggenheim",
            3: "üë®‚Äçüéì Unamuno en el Teatro Arriaga",
            4: "üë®‚Äçüéì Unamuno y Santiago",
            5: "üë®‚Äçüéì Unamuno en La Ribera"
        }
    };
    
    // Actualizar mapa con animaci√≥n
    const tourMap = document.querySelector('.tour-map');
    if (tourMap) {
        tourMap.style.opacity = '0.5';
        tourMap.style.transform = 'scale(0.95)';
        
        setTimeout(() => {
            tourMap.innerHTML = `
                <iframe 
                    src="https://www.openstreetmap.org/export/embed.html?bbox=-2.9534%2C43.2539%2C-2.9094%2C43.2759&layer=mapnik&marker=43.2627%2C-2.9253"
                    width="100%" 
                    height="150" 
                    style="border: none; border-radius: 12px;"
                    allowfullscreen
                    loading="lazy"
                    referrerpolicy="no-referrer-when-downgrade">
                </iframe>
                <div style="position: absolute; top: 10px; left: 10px; background: rgba(255,255,255,0.9); padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                    üìç Bilbao
                </div>
                <div style="position: absolute; bottom: 10px; right: 10px; background: rgba(0,0,0,0.7); color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                    Punto ${currentPoint} de ${totalPoints}
                </div>
            `;
            
            tourMap.style.opacity = '1';
            tourMap.style.transform = 'scale(1)';
        }, 200);
    }
    
    // Actualizar contenido con animaci√≥n
    const titleElement = document.getElementById('tour-title');
    const descElement = document.getElementById('tour-description');
    
    if (titleElement && descElement) {
        titleElement.style.opacity = '0';
        descElement.style.opacity = '0';
        
        setTimeout(() => {
            if (selectedTour && tourTitles[selectedTour] && tourDescriptions[selectedTour]) {
                titleElement.textContent = tourTitles[selectedTour][currentPoint];
                descElement.innerHTML = tourDescriptions[selectedTour][currentPoint].replace(/\n/g, '<br>');
            }
            
            titleElement.style.opacity = '1';
            descElement.style.opacity = '1';
        }, 300);
    }
    
    // Mostrar/ocultar elementos seg√∫n el tipo de tour
    const adventureActions = document.getElementById('adventure-actions');
    const nextBtn = document.getElementById('next-btn');
    
    if (selectedTour === 'adventure') {
        if (adventureActions) adventureActions.style.display = 'block';
        if (nextBtn) nextBtn.style.display = 'none';
    } else {
        if (adventureActions) adventureActions.style.display = 'none';
        if (nextBtn) nextBtn.style.display = 'block';
    }
}

// Funci√≥n para revelar ubicaci√≥n en modo aventura
function revealLocation() {
    const revealDescriptions = {
        1: "¬°Muy bien! Has encontrado el Casco Viejo. El Casco Viejo de Bilbao, conocido como Siete Calles, es el coraz√≥n hist√≥rico de la ciudad. Sus calles empedradas guardan siglos de historia mercantil y tradici√≥n vasca.",
        2: "¬°Excelente! Has llegado al Museo Guggenheim. Dise√±ado por Frank Gehry, este museo con forma de barco es una obra maestra de la arquitectura contempor√°nea. Sus curvas de titanio reflejan la luz del sol creando un espect√°culo visual √∫nico.",
        3: "¬°Perfecto! Has encontrado el Teatro Arriaga. Inaugurado en 1890, es el principal teatro de Bilbao. Su fachada neocl√°sica y su interior decorado al estilo franc√©s lo convierten en una joya arquitect√≥nica.",
        4: "¬°Fant√°stico! Has llegado a la Catedral de Santiago. Esta construcci√≥n g√≥tica del siglo XIV es donde el patr√≥n de Bilbao protege a sus habitantes. Su torre campanario es uno de los s√≠mbolos m√°s reconocibles de la ciudad.",
        5: "¬°Incre√≠ble! Has encontrado el Mercado de la Ribera. Uno de los mercados cubiertos m√°s grandes de Europa, con su arquitectura Art D√©co de 1929 alberga m√°s de 60 puestos con lo mejor de la gastronom√≠a vasca."
    };
    
    const revealTitles = {
        1: "üèõÔ∏è Casco Viejo - Siete Calles",
        2: "üèõÔ∏è Museo Guggenheim Bilbao", 
        3: "üé≠ Teatro Arriaga",
        4: "‚õ™ Catedral de Santiago",
        5: "üçé Mercado de la Ribera"
    };
    
    // Revelar el t√≠tulo real del lugar
    const titleElement = document.getElementById('tour-title');
    const descElement = document.getElementById('tour-description');
    
    if (titleElement) {
        titleElement.textContent = revealTitles[currentPoint];
    }
    
    if (descElement) {
        descElement.innerHTML = `
            <div style="background: #e8f5e8; padding: 15px; border-radius: 10px; margin-bottom: 15px; border-left: 4px solid #4CAF50;">
                <strong>üéâ ¬°Muy bien!</strong> Has encontrado el lugar correcto.
            </div>
            ${revealDescriptions[currentPoint]}
        `;
    }

    const adventureActions = document.getElementById('adventure-actions');
    const nextBtn = document.getElementById('next-btn');
    
    if (adventureActions) adventureActions.style.display = 'none';
    if (nextBtn) nextBtn.style.display = 'block';
    
    showNotification('¬°Ubicaci√≥n revelada!', 'success');
}

// Sistema de valoraci√≥n
function selectRating(rating) {
    currentRating = rating;
    updateRatingButtons();
    showNotification(`Valoraci√≥n: ${rating} estrellas`, 'info');
}

function updateRatingButtons() {
    const buttons = document.querySelectorAll('.rating-btn');
    buttons.forEach((btn, index) => {
        if (index + 1 === currentRating) {
            btn.classList.add('selected');
        } else {
            btn.classList.remove('selected');
        }
    });
}

// Funci√≥n para inicializar el tour
async function initializeTour() {
    currentPoint = 1;
    audioProgress = 0;
    audioPlaying = false;
    
    const progressPercent = (currentPoint / totalPoints) * 100;
    const progressFill = document.querySelector('.progress-fill');
    if (progressFill) {
        progressFill.style.width = progressPercent + '%';
    }
    
    // Registrar el inicio del tour en Supabase
    const currentUser = await auth.getCurrentUser();
    if (currentUser && selectedTourId) {
        try {
            const result = await tours.startTour(currentUser.id, selectedTourId, totalPoints);
            if (result.success) {
                console.log('Tour iniciado y registrado en Supabase');
            }
        } catch (error) {
            console.error('Error al registrar inicio del tour:', error);
        }
    }
    
    const tourDescriptions = {
        simple: {
            1: "El Casco Viejo de Bilbao, conocido como Siete Calles, es el coraz√≥n hist√≥rico de la ciudad. Sus calles empedradas guardan siglos de historia mercantil y tradici√≥n vasca. Fundado en 1300, estas calles fueron el n√∫cleo comercial que dio origen a la gran villa de Bilbao."
        },
        adventure: {
            1: "üîç Primera pista: Busca el lugar donde nacieron las siete calles que fundaron Bilbao. Sus piedras guardan m√°s de 700 a√±os de historia..."
        },
        historic: {
            1: "Queridos visitantes, soy Miguel de Unamuno. Estas calles que pis√°is fueron testigos de mi juventud. El Casco Viejo late con el coraz√≥n de la aut√©ntica Bilbao, donde cada piedra es un verso de nuestra historia."
        }
    };
    
    const initTitles = {
        simple: {
            1: "üèõÔ∏è Casco Viejo - Siete Calles"
        },
        adventure: {
            1: "üîç Ubicaci√≥n Misteriosa #1"
        },
        historic: {
            1: "üèõÔ∏è Casco Viejo - Siete Calles"
        }
    };
    
    const tourMap = document.querySelector('.tour-map');
    if (tourMap) {
        tourMap.innerHTML = `
            <iframe 
                src="https://www.openstreetmap.org/export/embed.html?bbox=-2.9534%2C43.2539%2C-2.9094%2C43.2759&layer=mapnik&marker=43.2627%2C-2.9253"
                width="100%" 
                height="150" 
                style="border: none; border-radius: 12px;"
                allowfullscreen
                loading="lazy"
                referrerpolicy="no-referrer-when-downgrade">
            </iframe>
            <div style="position: absolute; top: 10px; left: 10px; background: rgba(255,255,255,0.9); padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                üìç Bilbao
            </div>
            <div style="position: absolute; bottom: 10px; right: 10px; background: rgba(0,0,0,0.7); color: white; padding: 5px 10px; border-radius: 15px; font-size: 12px;">
                Punto ${currentPoint} de ${totalPoints}
            </div>
        `;
    }

    const titleElement = document.getElementById('tour-title');
    const descElement = document.getElementById('tour-description');
    
    if (titleElement && selectedTour && initTitles[selectedTour]) {
        titleElement.textContent = initTitles[selectedTour][currentPoint];
    }
    
    if (descElement && selectedTour && tourDescriptions[selectedTour]) {
        descElement.textContent = tourDescriptions[selectedTour][currentPoint];
    }
    
    // Mostrar/ocultar elementos seg√∫n el tipo de tour
    const adventureActions = document.getElementById('adventure-actions');
    const nextBtn = document.getElementById('next-btn');
    
    if (selectedTour === 'adventure') {
        if (adventureActions) adventureActions.style.display = 'block';
        if (nextBtn) nextBtn.style.display = 'none';
    } else {
        if (adventureActions) adventureActions.style.display = 'none';
        if (nextBtn) nextBtn.style.display = 'block';
    }
    
    showNotification('Tour iniciado', 'success');
}

async function submitRating() {
    if (currentRating === 0) {
        showNotification('Por favor, selecciona una puntuaci√≥n antes de enviar', 'warning');
        return;
    }
    
    const feedback = document.getElementById('feedback');
    const feedbackText = feedback ? feedback.value : '';
    
    // Guardar rating en Supabase si hay usuario autenticado
    try {
        const user = await auth.getCurrentUser();
        if (user && selectedTourId) {
            // Usar el ID real del tour de Supabase
            const result = await tours.saveTourRating(selectedTourId, user.id, currentRating, feedbackText);
            
            if (result.success) {
                showNotification(`¬°Gracias por tu valoraci√≥n de ${currentRating} estrellas! üåü`, 'success');
            } else {
                console.error('Error al guardar rating:', result.error);
                showNotification('Error al guardar valoraci√≥n, pero gracias por tu feedback', 'warning');
            }
        } else {
            // Usuario no autenticado o tour no seleccionado
            showNotification(`¬°Gracias por tu valoraci√≥n de ${currentRating} estrellas! üåü`, 'success');
        }
    } catch (error) {
        console.error('Error al procesar rating:', error);
        showNotification(`¬°Gracias por tu valoraci√≥n de ${currentRating} estrellas! üåü`, 'success');
    }
}

function shareOn(platform) {
    const messages = {
        facebook: '¬°Acabo de completar un incre√≠ble tour por Bilbao con DrifTour! üèõÔ∏è #FreeTour #Bilbao',
        twitter: '¬°Descubriendo Bilbao con @DrifTour! üåü Una experiencia √∫nica #FreeTour #Bilbao',
        instagram: 'üìç Bilbao | DrifTour experience ‚ú® #DrifTour #Bilbao #Turismo #Culture'
    };
    
    showNotification(`Compartiendo en ${platform}`, 'info', 2500);
    console.log(`Compartiendo: ${messages[platform]}`);
}

function copyLink() {
    const link = 'https://driftour.app/tour/bilbao/12345';
    
    if (navigator.clipboard) {
        navigator.clipboard.writeText(link).then(() => {
            showNotification('¬°Enlace copiado al portapapeles! üìã', 'success');
        }).catch(() => {
            showNotification('Enlace: ' + link, 'info', 4000);
        });
    } else {
        // Fallback para navegadores sin soporte de clipboard API
        showNotification('Enlace: ' + link, 'info', 4000);
    }
}

// Funci√≥n para cargar tours desde Supabase
async function loadToursFromSupabase() {
    try {
        const toursData = await tours.getTours();
        if (toursData && toursData.length > 0) {
            console.log('Tours cargados desde Supabase:', toursData);
            updateToursDisplay(toursData);
            showNotification(`${toursData.length} tours cargados desde la base de datos üéâ`, 'success', 2000);
        } else {
            console.log('No se encontraron tours, usando tours est√°ticos');
            showNotification('Usando tours de ejemplo', 'info', 2000);
        }
    } catch (error) {
        console.error('Error al cargar tours:', error);
        showNotification('Error al cargar tours, usando ejemplos locales', 'warning', 3000);
    }
}

// Funci√≥n para actualizar la visualizaci√≥n de tours
function updateToursDisplay(toursData) {
    const tourSections = {
        clasicos: document.querySelector('.tour-section.clasicos .tour-options'),
        tematicos: document.querySelector('.tour-section.tematicos .tour-options'),
        teatralizados: document.querySelector('.tour-section.teatralizados .tour-options')
    };
    
    // Limpiar todas las secciones para cargar tours desde Supabase
    Object.values(tourSections).forEach(section => {
        if (section) section.innerHTML = '';
    });
    
    // Clasificar tours por tipo
    toursData.forEach(tour => {
        const tourCard = createTourCard(tour);
        
        switch(tour.type) {
            case 'simple':
            case 'adventure':
            case 'historic':
                if (tourSections.clasicos) {
                    tourSections.clasicos.appendChild(tourCard);
                    console.log('Tour cl√°sico agregado:', tour.title);
                }
                break;
            case 'themed':
                if (tourSections.tematicos) {
                    tourSections.tematicos.appendChild(tourCard);
                    console.log('Tour tem√°tico agregado:', tour.title);
                }
                break;
            case 'theatrical':
                if (tourSections.teatralizados) {
                    tourSections.teatralizados.appendChild(tourCard);
                    console.log('Tour teatralizado agregado:', tour.title);
                }
                break;
        }
    });
    
    // Actualizar favoritos despu√©s de cargar tours
    updateFavoritesUI();
}

// Funci√≥n para crear una tarjeta de tour
function createTourCard(tour) {
    const card = document.createElement('div');
    card.className = 'tour-card';
    card.dataset.tour = tour.id || tour.type;
    
    const price = tour.price === 0 ? 'Gratis' : `${tour.price}‚Ç¨`;
    const isPremium = tour.is_premium ? '‚≠ê' : '';
    const isFavorite = userFavorites.has(tour.id || tour.type);
    
    card.innerHTML = `
        <div class="tour-header">
            <h3>${getTypeIcon(tour.type)} ${tour.title} ${isPremium}</h3>
            <div class="tour-header-right">
                <span class="tour-price">${price}</span>
                <button class="favorite-btn" onclick="toggleFavorite('${tour.id || tour.type}')" 
                        style="background: none; border: none; font-size: 20px; cursor: pointer; margin-left: 10px; color: ${isFavorite ? '#dc3545' : '#6c757d'};">
                    ${isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
                </button>
            </div>
        </div>
        <p>${tour.description}</p>
        <button class="tour-btn" onclick="selectTour('${tour.type}')">Seleccionar</button>
    `;
    
    return card;
}

// Funci√≥n para obtener el icono seg√∫n el tipo de tour
function getTypeIcon(type) {
    const icons = {
        simple: 'üèõÔ∏è',
        adventure: 'üîç',
        historic: 'üë®‚Äçüéì',
        themed: 'üé≠',
        theatrical: 'üé®'
    };
    return icons[type] || 'üìç';
}

// Funci√≥n para crear popup personalizado
function createCustomPopup(title, content) {
    // Remover popup existente si existe
    const existingPopup = document.getElementById('custom-popup');
    if (existingPopup) {
        existingPopup.remove();
    }
    
    // Crear nuevo popup
    const popup = document.createElement('div');
    popup.id = 'custom-popup';
    popup.className = 'popup-overlay';
    popup.style.display = 'flex';
    popup.style.zIndex = '10000';
    
    popup.innerHTML = `
        <div class="popup-content" style="max-width: 400px; width: 90%;">
            <div class="popup-header">
                <h3>${title}</h3>
                <button class="close-btn" onclick="closeCustomPopup()">√ó</button>
            </div>
            <div class="popup-body">
                ${content}
            </div>
        </div>
    `;
    
    document.body.appendChild(popup);
    
    // Cerrar al hacer clic fuera del popup
    popup.addEventListener('click', function(e) {
        if (e.target === popup) {
            closeCustomPopup();
        }
    });
}

// Funci√≥n para cerrar popup personalizado
function closeCustomPopup() {
    const popup = document.getElementById('custom-popup');
    if (popup) {
        popup.remove();
    }
}

// Funci√≥n para obtener estad√≠sticas del usuario
async function getUserStats(userId) {
    try {
        const stats = await tours.getUserStats(userId);
        return stats;
    } catch (error) {
        console.error('Error al obtener estad√≠sticas:', error);
        return {
            completedTours: 0,
            averageRating: 0
        };
    }
}

// Funci√≥n para mostrar historial de tours
async function showTourHistory() {
    closePopup('user-popup');
    
    const currentUser = await auth.getCurrentUser();
    
    if (!currentUser) {
        showNotification('Inicia sesi√≥n para ver tu historial', 'warning');
        return;
    }
    
    try {
        const progress = await tours.getUserProgress(currentUser.id);
        const allTours = await tours.getTours();
        
        if (progress.length === 0) {
            const content = `
                <div style="text-align: center; padding: 20px;">
                    <h3>üìö Historial de Tours</h3>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 15px 0;">
                        <p>üéØ A√∫n no has completado ning√∫n tour.</p>
                        <p>¬°Explora Bilbao y empieza tu aventura!</p>
                    </div>
                    <button onclick="closeCustomPopup()" class="tour-btn">Cerrar</button>
                </div>
            `;
            
            createCustomPopup('Historial de Tours', content);
            return;
        }
        
        let historyContent = '<div style="max-height: 400px; overflow-y: auto;">';
        
        for (const item of progress) {
            // Buscar informaci√≥n del tour
            const tourInfo = allTours.find(t => t.id === item.tour_id);
            const tourName = tourInfo ? tourInfo.title : `Tour ${item.tour_id}`;
            
            const startedDate = new Date(item.started_at).toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
            
            const completedDate = item.completed_at ? 
                new Date(item.completed_at).toLocaleDateString('es-ES', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                }) : null;
            
            const progressPercent = item.total_points > 0 ? 
                Math.round((item.progress / item.total_points) * 100) : 0;
            
            const isCompleted = item.completed;
            const statusIcon = isCompleted ? '‚úÖ' : '‚è≥';
            const statusText = isCompleted ? 'Completado' : 'En progreso';
            const statusColor = isCompleted ? '#28a745' : '#ffc107';
            const bgColor = isCompleted ? '#e8f5e8' : '#fff3cd';
            
            historyContent += `
                <div style="background: ${bgColor}; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid ${statusColor};">
                    <h4 style="margin: 0 0 10px 0; color: #333;">${statusIcon} ${tourName}</h4>
                    <p style="margin: 5px 0; color: #666;"><strong>Progreso:</strong> ${progressPercent}% (${item.progress}/${item.total_points} puntos)</p>
                    <p style="margin: 5px 0; color: #666;"><strong>Estado:</strong> ${statusText}</p>
                    <p style="margin: 5px 0; color: #666;"><strong>Iniciado:</strong> ${startedDate}</p>
                    ${completedDate ? `<p style="margin: 5px 0; color: #666;"><strong>Completado:</strong> ${completedDate}</p>` : ''}
                </div>
            `;
        }
        
        historyContent += '</div>';
        
        const fullContent = `
            <div style="text-align: center; padding: 20px;">
                <h3>üìö Historial de Tours</h3>
                ${historyContent}
                <button onclick="closeCustomPopup()" class="tour-btn" style="margin-top: 15px;">Cerrar</button>
            </div>
        `;
        
        createCustomPopup('Historial de Tours', fullContent);
        
    } catch (error) {
        console.error('Error al obtener historial:', error);
        showNotification('Error al cargar el historial', 'error');
    }
}

// Sistema de favoritos
let userFavorites = new Set();

// Funci√≥n para obtener favoritos del usuario
async function loadUserFavorites() {
    const currentUser = await auth.getCurrentUser();
    if (!currentUser) return;
    
    try {
        const favorites = await tours.getUserFavorites(currentUser.id);
        userFavorites = new Set(favorites.map(f => f.tour_id));
        
        // Actualizar UI de tours est√°ticos
        initializeStaticFavorites();
    } catch (error) {
        console.error('Error al cargar favoritos:', error);
        if (error.message && error.message.includes('user_favorites')) {
            console.warn('‚ö†Ô∏è Tabla user_favorites no existe. Ejecuta add-favorites-table.sql en Supabase');
        }
    }
}

// Funci√≥n para alternar favorito
async function toggleFavorite(tourId) {
    const currentUser = await auth.getCurrentUser();
    if (!currentUser) {
        showNotification('Inicia sesi√≥n para guardar favoritos', 'warning');
        return;
    }
    
    try {
        if (userFavorites.has(tourId)) {
            await tours.removeFavorite(currentUser.id, tourId);
            userFavorites.delete(tourId);
            showNotification('Tour eliminado de favoritos', 'info');
        } else {
            await tours.addFavorite(currentUser.id, tourId);
            userFavorites.add(tourId);
            showNotification('Tour agregado a favoritos ‚≠ê', 'success');
        }
        
        // Actualizar UI de favoritos
        updateFavoritesUI();
    } catch (error) {
        console.error('Error al actualizar favorito:', error);
        if (error.message && error.message.includes('user_favorites')) {
            showNotification('‚ö†Ô∏è Tabla favoritos no configurada. Contacta al administrador', 'warning');
        } else {
            showNotification('Error al actualizar favorito', 'error');
        }
    }
}

// Funci√≥n para mostrar favoritos
async function showFavorites() {
    closePopup('user-popup');
    
    const currentUser = await auth.getCurrentUser();
    if (!currentUser) {
        showNotification('Inicia sesi√≥n para ver tus favoritos', 'warning');
        return;
    }
    
    try {
        const favorites = await tours.getUserFavorites(currentUser.id);
        
        if (favorites.length === 0) {
            const content = `
                <div style="text-align: center; padding: 20px;">
                    <h3>‚≠ê Mis Favoritos</h3>
                    <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; margin: 15px 0;">
                        <p>‚ù§Ô∏è A√∫n no tienes tours favoritos.</p>
                        <p>¬°Marca como favorito los tours que m√°s te gusten!</p>
                    </div>
                    <button onclick="closeCustomPopup()" class="tour-btn">Cerrar</button>
                </div>
            `;
            
            createCustomPopup('Mis Favoritos', content);
            return;
        }
        
        let favoritesContent = '<div style="max-height: 400px; overflow-y: auto;">';
        
        for (const favorite of favorites) {
            const addedDate = new Date(favorite.created_at).toLocaleDateString('es-ES');
            
            favoritesContent += `
                <div style="background: #fff3cd; padding: 15px; border-radius: 10px; margin: 10px 0; border-left: 4px solid #ffc107;">
                    <h4 style="margin: 0 0 10px 0;">‚≠ê Tour ${favorite.tour_id}</h4>
                    <p><strong>Agregado:</strong> ${addedDate}</p>
                    <button onclick="toggleFavorite('${favorite.tour_id}')" class="tour-btn" style="background: #dc3545; margin-top: 10px;">
                        Eliminar de favoritos
                    </button>
                </div>
            `;
        }
        
        favoritesContent += '</div>';
        
        const fullContent = `
            <div style="text-align: center; padding: 20px;">
                <h3>‚≠ê Mis Favoritos</h3>
                ${favoritesContent}
                <button onclick="closeCustomPopup()" class="tour-btn" style="margin-top: 15px;">Cerrar</button>
            </div>
        `;
        
        createCustomPopup('Mis Favoritos', fullContent);
        
    } catch (error) {
        console.error('Error al obtener favoritos:', error);
        showNotification('Error al cargar favoritos', 'error');
    }
}

// Funci√≥n para actualizar la UI de favoritos
function updateFavoritesUI() {
    const tourCards = document.querySelectorAll('.tour-card');
    
    tourCards.forEach(card => {
        const tourId = card.dataset.tour;
        const favoriteBtn = card.querySelector('.favorite-btn');
        
        if (favoriteBtn && tourId) {
            if (userFavorites.has(tourId)) {
                favoriteBtn.innerHTML = '‚ù§Ô∏è';
                favoriteBtn.style.color = '#dc3545';
            } else {
                favoriteBtn.innerHTML = 'ü§ç';
                favoriteBtn.style.color = '#6c757d';
            }
        }
    });
}

// Funci√≥n para inicializar favoritos (ya no necesaria con tours din√°micos)
function initializeStaticFavorites() {
    // Esta funci√≥n ya no es necesaria ya que todos los tours se cargan desde Supabase
    // y se inicializan autom√°ticamente en updateToursDisplay()
}

// Inicializaci√≥n de la aplicaci√≥n
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DrifTour App inicializada');
    
    // Cargar mapeo de tipos de tour a IDs
    loadTourTypeMapping();
    
    // Configurar event listeners para la cabecera
    const userInfo = document.getElementById('user-info');
    const premiumBtn = document.getElementById('premium-btn');
    
    if (userInfo) {
        userInfo.addEventListener('click', toggleUserMenu);
    }
    
    if (premiumBtn) {
        premiumBtn.addEventListener('click', togglePremiumPopup);
    }
    
    // Cerrar popups al hacer click fuera de ellos
    document.querySelectorAll('.popup-overlay').forEach(overlay => {
        overlay.addEventListener('click', function(e) {
            if (e.target === overlay) {
                closePopup(overlay.id);
            }
        });
    });
    
    // Configurar filtros de tiempo
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            selectedTime = this.dataset.time;
            showNotification(`Duraci√≥n seleccionada: ${selectedTime}`, 'info', 1500);
        });
    });

    // Configurar opciones de accesibilidad
    document.querySelectorAll('.accessibility-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            this.classList.toggle('active');
            const accessibility = this.dataset.accessibility;
            if (selectedAccessibility.includes(accessibility)) {
                selectedAccessibility = selectedAccessibility.filter(a => a !== accessibility);
                showNotification(`${accessibility} desactivado`, 'info', 1500);
            } else {
                selectedAccessibility.push(accessibility);
                showNotification(`${accessibility} activado`, 'success', 1500);
            }
        });
    });
    
    // Modo diurno por defecto
    isNightMode = false;
    document.body.classList.remove('night-mode');
    const container = document.getElementById('main-container');
    if (container) {
        container.classList.remove('night-mode');
    }
    
    const nightModeIcon = document.getElementById('night-mode-icon');
    const nightModeText = document.getElementById('night-mode-text');
    if (nightModeIcon) nightModeIcon.textContent = 'üåô';
    if (nightModeText) nightModeText.textContent = 'Modo Nocturno';
    
    // Actualizar estado inicial del usuario
    updateUserStatus();
    
    // Cargar tours desde Supabase
    loadToursFromSupabase();
    
    // Cargar favoritos del usuario
    loadUserFavorites();
    
    // Event listeners para eventos de autenticaci√≥n de Supabase
    window.addEventListener('userSignedIn', function(event) {
        const user = event.detail;
        userName = user.user_metadata?.name || 'Usuario';
        updateUserStatus();
        showNotification(`¬°Bienvenido ${userName}! üéâ`, 'success');
        
        // Cargar favoritos del usuario
        loadUserFavorites();
        
        // Mostrar pantalla principal si estamos en login
        if (document.getElementById('login-screen').classList.contains('active')) {
            showScreen('map-screen');
        }
    });
    
    window.addEventListener('userSignedOut', function() {
        userName = 'Invitado';
        updateUserStatus();
        showNotification('Sesi√≥n cerrada', 'info');
        showScreen('login-screen');
    });
    
    // Event listeners para botones de login y registro
    const loginBtn = document.getElementById('login-btn');
    const registerBtn = document.getElementById('register-btn');
    const registerLink = document.getElementById('register-link');
    const loginLink = document.getElementById('login-link');
    
    if (loginBtn) {
        loginBtn.addEventListener('click', async function() {
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            if (!email || !password) {
                showNotification('Por favor, completa todos los campos', 'warning');
                return;
            }
            
            // Intentar iniciar sesi√≥n con Supabase
            const result = await auth.signIn(email, password);
            if (result.success) {
                showNotification('¬°Bienvenido! üéâ', 'success');
                showScreen('map-screen');
            } else {
                showNotification('Error al iniciar sesi√≥n: ' + result.error, 'error');
            }
        });
    }
    
    if (registerBtn) {
        registerBtn.addEventListener('click', async function() {
            const name = document.getElementById('reg-name').value;
            const email = document.getElementById('reg-email').value;
            const password = document.getElementById('reg-password').value;
            
            if (!name || !email || !password) {
                showNotification('Por favor, completa todos los campos', 'warning');
                return;
            }
            
            // Intentar registrar con Supabase
            const result = await auth.signUp(email, password, name);
            if (result.success) {
                showNotification('¬°Cuenta creada! Revisa tu email para confirmar', 'success');
                showScreen('login-screen');
            } else {
                showNotification('Error al crear cuenta: ' + result.error, 'error');
            }
        });
    }
    
    if (registerLink) {
        registerLink.addEventListener('click', () => showScreen('register-screen'));
    }
    
    if (loginLink) {
        loginLink.addEventListener('click', () => showScreen('login-screen'));
    }
    
    // Mostrar notificaci√≥n de bienvenida
    setTimeout(() => {
        showNotification('¬°Bienvenido a DrifTour! üéâ', 'info', 3000);
    }, 1000);
    
    // Agregar efectos de hover mejorados
    document.querySelectorAll('.btn').forEach(btn => {
        btn.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-3px)';
        });
        
        btn.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
        });
    });
});

// Registrar Service Worker para PWA
if ('serviceWorker' in navigator && location.protocol === 'https:') {
  window.addEventListener('load', () => {
    // Detectar si estamos en GitHub Pages o local
    const isGitHubPages = location.hostname === 'imanolow.github.io';
    const basePath = isGitHubPages ? '/driftour-web' : '';
    const swPath = `${basePath}/service-worker.js`;
    
    navigator.serviceWorker.register(swPath)
      .then((registration) => {
        console.log('SW registrado con √©xito: ', registration);
      })
      .catch((registrationError) => {
        console.log('SW registration failed: ', registrationError);
      });
  });
} else if (location.protocol === 'http:') {
  console.log('Service Worker no registrado (requiere HTTPS)');
}

// Funci√≥n para cargar el mapeo de tipos de tour a IDs
async function loadTourTypeMapping() {
    try {
        const allTours = await tours.getTours();
        tourTypeToIdMap = {};
        
        for (const tour of allTours) {
            tourTypeToIdMap[tour.type] = tour.id;
        }
        
        console.log('Mapeo de tours cargado:', tourTypeToIdMap);
    } catch (error) {
        console.error('Error al cargar mapeo de tours:', error);
    }
}
